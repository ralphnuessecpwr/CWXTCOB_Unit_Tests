<?xml version="1.0" encoding="UTF-8"?>
<?totaltestVersion 18.2.1.v20170627-1433_24?>
<!--Topaz for Total Test 18.2.1.v20170627-1433_24 2017-08-23 19:34:16-->
<testscenario:testscenario xmlns:checkconditions="http://www.compuware.com/model/xml/checkconditions" xmlns:listructure="http://www.compuware.com/model/xml/listructure" xmlns:properties="http://www.compuware.com/model/xml/properties" xmlns:testcase="http://www.compuware.com/model/xml/testcase" xmlns:testscenario="http://www.compuware.com/model/xml/testscenario" alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario">
  <testscenario:description></testscenario:description>
  <testscenario:testcases>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg1.SALES_AMOUNT.SALES_AMOUNT) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">0</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">0</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition>
          <checkconditions:expectation></checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_02_1" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">1</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('0.02').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">0.02</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_02_2" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">15000</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('300').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">300</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_02_3" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">20000</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('400').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">400</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_04_1" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">20001</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('800.04').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">800.04</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_04_2" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">25000</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('1000').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">1000</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_04_3" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">40000</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('1600').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">1600</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_08_1" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">60001</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('4800.08').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">4800.08</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_08_2" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">75000</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('6000').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">6000</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_08_3" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">80000</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">55000.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('6400').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">6400</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_09_1" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">100001</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">100001</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('15000.15').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">15000.15</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_09_2" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">250000</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">100001</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('37500.00').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">37500.00</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Sales.testscenario%23CWXTSUBCCase0_09_3" target="CWXTSUBC">
      <testcase:description></testcase:description>
      <testcase:ddio>HPOGXM0.DEMO.DB1</testcase:ddio>
      <testcase:ddiotype>DDIO</testcase:ddiotype>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">500000</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <checkconditions:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <checkconditions:expectation assert="noassert" type="string">S</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <checkconditions:expectation assert="noassert" type="number">100001</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
        <checkconditions:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <checkconditions:expression>BigDecimalCreator.make('75000').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</checkconditions:expression>
          <checkconditions:expectation assert="=" type="number">75000</checkconditions:expectation>
        </checkconditions:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
  </testscenario:testcases>
</testscenario:testscenario>